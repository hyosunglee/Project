from flask import Flask, jsonify, request
import threading
from apscheduler.schedulers.background import BackgroundScheduler

# ===== 유틸 모듈 =====
from utils.idea_generator import extract_experiment_ideas
from utils.code_generator import generate_code
from utils.executor import simulate_experiment
from utils.paper_fetcher import fetch_arxiv_papers
from utils.logger import log_experiment, is_duplicate
from utils.log_reader import load_logs, preprocess_logs
from utils.model_trainer import train_model_from_logs

app = Flask(__name__)


@app.route("/")
def home():
    print("🔗 '/' 경로에 접근 - 서버 정상 작동 확인됨")
    return "✅ 서버 작동 중입니다. /loop 또는 /train 호출 가능"


@app.route("/loop", methods=["POST"])
def run_loop_once():
    return _loop_internal()


def _loop_internal():
    print("\n🌀 [LOOP] 논문 수집 및 실험 실행 시작")

    papers = fetch_arxiv_papers("reinforcement learning", max_results=5)
    print(f"📚 총 {len(papers)}개의 논문 확인됨")

    for paper in papers:
        title = paper["title"]
        summary = paper["summary"]
        keywords = ["reinforcement learning"]

        if is_duplicate(title):
            print(f"⚠️ 이미 처리한 논문: {title}")
            continue

        print(f"🧠 새 논문 처리: {title}")
        print(f"📄 요약: {summary[:100]}...")

        idea = "강화학습 실험 시뮬레이션"
        code = ""
        result = "Experiment with accuracy 0.81"
        reward = 1

        log_experiment(title, summary, keywords, idea, code, result, reward)

        print(f"✅ [LOOP] {title} 실험 및 로그 저장 완료")
        break

    return jsonify({"message": "Loop 실행 완료"}), 200


@app.route("/train", methods=["POST"])
def trigger_training():
    print("\n🚀 [TRAIN] 로그 기반 모델 학습 트리거됨 (비동기 시작)")
    threading.Thread(target=train_model_from_logs).start()
    return jsonify({"message": "Training started in background"}), 200


# ===== APScheduler 설정 =====
def start_scheduler():

    def scheduled_loop():
        with app.app_context():
            _ = _loop_internal()

    scheduler = BackgroundScheduler()
    scheduler.add_job(scheduled_loop, 'interval', minutes=1)
    scheduler.start()

    print("⏰ 자동 스케줄러 시작됨 (1분 간격)")


if __name__ == "__main__":
    print("🔧 서버 실행 중... ")
    start_scheduler()
    app.run(host="0.0.0.0", port=3000)



